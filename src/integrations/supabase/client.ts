// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from '@/types/supabase';

const SUPABASE_URL = "https://ivuibzedbnbndoyfpfrz.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Iml2dWliemVkYm5ibmRveWZwZnJ6Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDUzNTE5MzYsImV4cCI6MjA2MDkyNzkzNn0.HX5foW5qkx-fSvBqHRrSNS1WhVFR1cqQ-euUV1X23WU";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Configuración mejorada para manejar problemas de conexión
export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: true,
    storageKey: 'supabase_auth_token',
    storage: {
      getItem: (key) => {
        try {
          const itemStr = localStorage.getItem(key);
          return itemStr ? JSON.parse(itemStr) : null;
        } catch (error) {
          console.error('Error al recuperar token de autenticación:', error);
          return null;
        }
      },
      setItem: (key, value) => {
        try {
          localStorage.setItem(key, JSON.stringify(value));
        } catch (error) {
          console.error('Error al guardar token de autenticación:', error);
        }
      },
      removeItem: (key) => {
        try {
          localStorage.removeItem(key);
        } catch (error) {
          console.error('Error al eliminar token de autenticación:', error);
        }
      }
    }
  },
  global: {
    // Aumentar el tiempo de espera para las solicitudes
    fetch: (url, options) => {
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 30000); // 30 segundos de timeout
      
      return fetch(url, {
        ...options,
        signal: controller.signal
      }).finally(() => clearTimeout(timeoutId));
    }
  }
});

// Función para verificar la conexión con Supabase
export const checkSupabaseConnection = async () => {
  try {
    const { data, error } = await supabase.auth.getSession();
    return { success: !error, error };
  } catch (error) {
    console.error('Error al verificar la conexión con Supabase:', error);
    return { success: false, error };
  }
};